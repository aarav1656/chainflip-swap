import { Signer } from 'ethers';
import { c as ChainflipNetwork, T as TransactionOptions } from './contracts-Maix4eRX.mjs';

type PendingRedemption = {
    amount: bigint;
    redeemAddress: string;
    startTime: bigint;
    expiryTime: bigint;
};

type FundingSDKOption = {
    network?: ChainflipNetwork;
    signer: Signer;
    rpcUrl?: string;
};
type TransactionHash = `0x${string}`;
declare class FundingSDK {
    private readonly options;
    private readonly rpcConfig;
    private redemptionTax?;
    constructor(options: FundingSDKOption);
    fundStateChainAccount(accountId: `0x${string}`, amount: bigint, txOpts?: TransactionOptions): Promise<TransactionHash>;
    executeRedemption(accountId: `0x${string}`, txOpts?: TransactionOptions): Promise<TransactionHash>;
    getMinimumFunding(): Promise<bigint>;
    getRedemptionDelay(): Promise<bigint>;
    getFlipBalance(): Promise<bigint>;
    getPendingRedemption(accountId: `0x${string}`): Promise<PendingRedemption | undefined>;
    approveStateChainGateway(amount: bigint, txOpts?: TransactionOptions): Promise<TransactionHash | null>;
    getRedemptionTax(): Promise<bigint>;
}

export { FundingSDK, type FundingSDKOption, type PendingRedemption };
