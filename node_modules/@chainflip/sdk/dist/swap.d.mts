import { Signer } from 'ethers';
import { A as AssetAndChain, C as Chain, a as Asset, I as InternalAsset, b as AssetOfChain, c as ChainflipNetwork, T as TransactionOptions, d as ChainAssetMap, e as ChainMap, U as UncheckedAssetAndChain } from './contracts-Maix4eRX.mjs';
export { g as Assets, h as ChainflipIds, i as ChainflipNetworks, f as Chains, j as getChainflipId } from './contracts-Maix4eRX.mjs';
import { z } from 'zod';

declare const ccmMetadataSchema: z.ZodObject<{
    gasBudget: z.ZodString;
    message: z.ZodEffects<z.ZodEffects<z.ZodString, `0x${string}`, string>, `0x${string}`, string>;
}, "strip", z.ZodTypeAny, {
    message: `0x${string}`;
    gasBudget: string;
}, {
    message: string;
    gasBudget: string;
}>;
type CcmMetadata = z.infer<typeof ccmMetadataSchema>;
declare const affiliateBroker: z.ZodEffects<z.ZodObject<{
    account: z.ZodEffects<z.ZodString, string, string>;
    commissionBps: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    account: string;
    commissionBps: number;
}, {
    account: string;
    commissionBps: number;
}>, {
    account: string;
    bps: number;
}, {
    account: string;
    commissionBps: number;
}>;
type AffiliateBroker = z.input<typeof affiliateBroker>;
type Fee<T> = {
    type: T;
    chain: Chain;
    asset: Asset;
    amount: string;
};
type SwapFee = Fee<'NETWORK' | 'INGRESS' | 'EGRESS' | 'BROKER' | 'BOOST'>;
type PoolFee = Fee<'LIQUIDITY'>;
type PoolInfo = {
    baseAsset: AssetAndChain;
    quoteAsset: AssetAndChain;
    fee: Omit<PoolFee, 'type'>;
};
type QuoteDetails = {
    intermediateAmount?: string;
    egressAmount: string;
    includedFees: SwapFee[];
    poolInfo: PoolInfo[];
    lowLiquidityWarning: boolean | undefined;
    estimatedDurationSeconds: number;
};
type BoostedQuoteDetails = QuoteDetails & {
    estimatedBoostFeeBps: number;
};
type QuoteQueryResponse = QuoteDetails & {
    boostQuote?: BoostedQuoteDetails;
};

interface ExecuteSwapParams {
    srcChain: Chain;
    srcAsset: Asset;
    destChain: Chain;
    destAsset: Asset;
    amount: string;
    destAddress: string;
    ccmMetadata?: CcmMetadata;
}

interface ChainData {
    chain: Chain;
    name: string;
    evmChainId: number | undefined;
    isMainnet: boolean;
    requiredBlockConfirmations: number | undefined;
}
type AssetData = {
    [C in Chain]: {
        chainflipId: InternalAsset;
        asset: AssetOfChain<C>;
        chain: C;
        contractAddress: string | undefined;
        decimals: number;
        name: string;
        symbol: string;
        isMainnet: boolean;
        minimumSwapAmount: string;
        maximumSwapAmount: string | null;
        minimumEgressAmount: string;
    };
}[Chain];
interface ChainsAndAssets {
    srcChain: Chain;
    srcAsset: Asset;
    destChain: Chain;
    destAsset: Asset;
}
interface QuoteRequest extends ChainsAndAssets {
    amount: string;
    brokerCommissionBps?: number;
    affiliateBrokers?: AffiliateBroker[];
}
interface QuoteResponse extends Omit<QuoteRequest, 'brokerCommissionBps' | 'affiliateBrokers'> {
    quote: QuoteQueryResponse;
}
interface DepositAddressRequest extends QuoteRequest {
    destAddress: string;
    ccmMetadata?: CcmMetadata;
    maxBoostFeeBps?: number;
    srcAddress?: string;
}
interface DepositAddressResponse extends DepositAddressRequest {
    depositChannelId: string;
    depositAddress: string;
    brokerCommissionBps: number;
    affiliateBrokers: AffiliateBroker[];
    depositChannelExpiryBlock: bigint;
    estimatedDepositChannelExpiryTime: number | undefined;
    channelOpeningFee: bigint;
}
interface SwapStatusRequest {
    id: string;
}
interface SwapStatusResponseCommonFields extends ChainsAndAssets {
    destAddress: string;
    ccmDepositReceivedBlockIndex: string | undefined;
    ccmMetadata: CcmMetadata | undefined;
    feesPaid: SwapFee[];
    estimatedDefaultDurationSeconds: number | undefined;
}
interface DepositAddressFields extends SwapStatusResponseCommonFields {
    depositAddress: string;
    depositChannelCreatedAt: number;
    depositChannelBrokerCommissionBps: number;
    expectedDepositAmount: string | undefined;
    depositChannelExpiryBlock: string;
    estimatedDepositChannelExpiryTime: number;
    isDepositChannelExpired: boolean;
    depositChannelOpenedThroughBackend: boolean;
    depositChannelAffiliateBrokers?: {
        account: string;
        commissionBps: number;
    }[];
    depositChannelMaxBoostFeeBps: number;
    effectiveBoostFeeBps?: number;
    boostSkippedAt?: number;
    boostSkippedBlockIndex?: string;
}
type BroadcastRequested = {
    swapId: string;
    depositAmount: string;
    depositReceivedAt: number;
    depositReceivedBlockIndex: string;
    intermediateAmount: string | undefined;
    swapExecutedAt: number;
    swapExecutedBlockIndex: string;
    egressAmount: string;
    egressScheduledAt: number;
    egressScheduledBlockIndex: string;
    broadcastRequestedAt: number;
    broadcastRequestedBlockIndex: string;
};
type CopyFields<T, U> = {
    [K in Exclude<keyof T, keyof U>]: undefined;
} & U;
type VaultSwapFields = CopyFields<DepositAddressFields, SwapStatusResponseCommonFields>;
type FailedVaultSwapStatusResponse = CopyFields<DepositAddressFields, {
    depositAmount: string;
    depositTransactionHash: string | undefined;
    depositTransactionRef: string | undefined;
    destAddress: string;
    error: {
        message: string;
        name: string;
    };
    failedAt: number;
    failedBlockIndex: string;
    failure: string;
    feesPaid: [];
    srcAsset: Asset;
    srcChain: Chain;
    state: 'FAILED';
    depositAddress: undefined;
}>;
type SwapState = {
    state: 'AWAITING_DEPOSIT';
    depositAmount: string | undefined;
    depositTransactionHash: string | undefined;
    depositTransactionRef: string | undefined;
    depositTransactionConfirmations: number | undefined;
} | {
    state: 'DEPOSIT_RECEIVED';
    swapId: string;
    depositAmount: string;
    depositReceivedAt: number;
    depositReceivedBlockIndex: string;
    depositBoostedAt?: number;
    depositBoostedBlockIndex?: string;
} | {
    state: 'SWAP_EXECUTED';
    swapId: string;
    depositAmount: string;
    depositReceivedAt: number;
    depositReceivedBlockIndex: string;
    intermediateAmount: string | undefined;
    swapExecutedAt: number;
    swapExecutedBlockIndex: string;
} | {
    state: 'EGRESS_SCHEDULED';
    swapId: string;
    depositAmount: string;
    depositReceivedAt: number;
    depositReceivedBlockIndex: string;
    intermediateAmount: string | undefined;
    swapExecutedAt: number;
    swapExecutedBlockIndex: string;
    egressAmount: string;
    egressScheduledAt: number;
    egressScheduledBlockIndex: string;
} | ({
    state: 'BROADCAST_REQUESTED';
} & BroadcastRequested) | ({
    state: 'BROADCASTED';
    broadcastTransactionRef: string;
} & BroadcastRequested) | ({
    state: 'BROADCAST_ABORTED';
    broadcastAbortedAt: number;
    broadcastAbortedBlockIndex: string;
} & BroadcastRequested) | ({
    state: 'COMPLETE';
    broadcastSucceededAt: number;
    broadcastSucceededBlockIndex: string;
    broadcastTransactionRef: string;
} & BroadcastRequested) | {
    state: 'FAILED';
    failure: 'INGRESS_IGNORED';
    error: {
        name: string;
        message: string;
    };
    depositAmount: string;
    depositTransactionHash: string | undefined;
    depositTransactionRef: string | undefined;
    failedAt: number;
    failedBlockIndex: string;
} | {
    state: 'FAILED';
    failure: 'EGRESS_IGNORED';
    error: {
        name: string;
        message: string;
    };
    swapId: string;
    depositAmount: string;
    depositReceivedAt: number;
    depositReceivedBlockIndex: string;
    intermediateAmount: string | undefined;
    swapExecutedAt: number;
    swapExecutedBlockIndex: string;
    ignoredEgressAmount: string;
    egressIgnoredAt: number;
    egressIgnoredBlockIndex: string;
};
type DepositAddressStatusResponse = DepositAddressFields & SwapState;
type VaultSwapStatusResponse = VaultSwapFields & SwapState;
type SwapStatusResponse = DepositAddressStatusResponse | VaultSwapStatusResponse | FailedVaultSwapStatusResponse;
type BoostPoolDepth = {
    feeTierBps: number;
    availableAmount: bigint;
    asset: Asset;
    chain: Chain;
};

type RequestOptions = {
    signal?: AbortSignal;
};

type TransactionHash = `0x${string}`;
type SwapSDKOptions = {
    network?: ChainflipNetwork;
    backendUrl?: string;
    signer?: Signer;
    broker?: {
        url: string;
        commissionBps: number;
    };
    rpcUrl?: string;
};
declare class SwapSDK {
    private readonly options;
    private readonly rpcConfig;
    private readonly trpc;
    private stateChainEnvironment?;
    private supportedAssets?;
    constructor(options?: SwapSDKOptions);
    getChains(sourceChain?: Chain): Promise<ChainData[]>;
    private getStateChainEnvironment;
    private getSupportedAssets;
    private getBoostPoolsDepth;
    getAssets(chain?: Chain): Promise<AssetData[]>;
    getQuote(quoteRequest: QuoteRequest, options?: RequestOptions): Promise<QuoteResponse>;
    requestDepositAddress(depositAddressRequest: DepositAddressRequest): Promise<DepositAddressResponse>;
    getStatus(swapStatusRequest: SwapStatusRequest, options?: RequestOptions): Promise<SwapStatusResponse>;
    executeSwap(params: ExecuteSwapParams, txOpts?: TransactionOptions & {
        signer?: Signer;
    }): Promise<TransactionHash>;
    approveVault(params: Pick<ExecuteSwapParams, 'srcChain' | 'srcAsset' | 'amount'>, txOpts?: TransactionOptions & {
        signer?: Signer;
    }): Promise<TransactionHash | null>;
    private validateSwapAmount;
    getSwapLimits(): Promise<{
        minimumSwapAmounts: ChainAssetMap<bigint>;
        maximumSwapAmounts: ChainAssetMap<bigint | null>;
    }>;
    getRequiredBlockConfirmations(): Promise<ChainMap<number | null>>;
    getChannelOpeningFees(): Promise<ChainMap<bigint>>;
    getBoostLiquidity({ chainAsset, feeTierBps, }?: {
        chainAsset?: UncheckedAssetAndChain;
        feeTierBps?: number;
    }): Promise<BoostPoolDepth[]>;
}

export { Asset, type AssetData, type BoostPoolDepth, Chain, type ChainData, InternalAsset as ChainflipId, ChainflipNetwork, type DepositAddressRequest, type DepositAddressResponse, type DepositAddressStatusResponse, type FailedVaultSwapStatusResponse, type QuoteRequest, type QuoteResponse, SwapSDK, type SwapSDKOptions, type SwapStatusRequest, type SwapStatusResponse, UncheckedAssetAndChain, type VaultSwapStatusResponse };
