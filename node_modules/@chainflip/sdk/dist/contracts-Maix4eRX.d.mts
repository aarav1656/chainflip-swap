type ArrayToMap<T extends readonly string[]> = {
    [K in T[number]]: K;
};
declare const InternalAssets: ArrayToMap<readonly ["Flip", "Usdc", "Dot", "Eth", "Btc", "Usdt", "ArbUsdc", "ArbEth"]>;
type InternalAsset = (typeof InternalAssets)[keyof typeof InternalAssets];
declare const Chains: ArrayToMap<readonly ["Bitcoin", "Ethereum", "Polkadot", "Arbitrum"]>;
type Chain = (typeof Chains)[keyof typeof Chains];
declare const Assets: ArrayToMap<readonly ["FLIP", "USDC", "DOT", "ETH", "BTC", "USDT"]>;
type Asset = (typeof Assets)[keyof typeof Assets];
declare const ChainflipNetworks: ArrayToMap<readonly ["backspin", "sisyphos", "perseverance", "mainnet"]>;
type ChainflipNetwork = (typeof ChainflipNetworks)[keyof typeof ChainflipNetworks];
declare const chainConstants: {
    readonly Ethereum: {
        readonly assets: ["ETH", "FLIP", "USDC", "USDT"];
        readonly gasAsset: "ETH";
        readonly contractId: 1;
        readonly blockTimeSeconds: 12;
    };
    readonly Polkadot: {
        readonly assets: ["DOT"];
        readonly gasAsset: "DOT";
        readonly contractId: 2;
        readonly blockTimeSeconds: 6;
    };
    readonly Bitcoin: {
        readonly assets: ["BTC"];
        readonly gasAsset: "BTC";
        readonly contractId: 3;
        readonly blockTimeSeconds: number;
    };
    readonly Arbitrum: {
        readonly assets: ["ETH", "USDC"];
        readonly gasAsset: "ETH";
        readonly contractId: 4;
        readonly blockTimeSeconds: 0.26;
    };
};
type AssetOfChain<C extends Chain> = (typeof chainConstants)[C]['assets'][number];
type UncheckedAssetAndChain = {
    asset: Asset;
    chain: Chain;
};
type AssetAndChain = {
    [C in Chain]: {
        [A in AssetOfChain<C>]: {
            chain: C;
            asset: A;
        };
    }[AssetOfChain<C>];
}[Chain];
type ChainAssetMap<T> = {
    [C in Chain]: {
        [A in AssetOfChain<C>]: T;
    };
};
type ChainMap<T> = {
    [C in Chain]: T;
};
declare function getInternalAsset(asset: UncheckedAssetAndChain): InternalAsset;
declare function getInternalAsset(asset: UncheckedAssetAndChain, assert: true): InternalAsset;
declare function getInternalAsset(asset: UncheckedAssetAndChain, assert: boolean): InternalAsset | null;

type TransactionOptions = {
    gasLimit?: bigint;
    gasPrice?: bigint;
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
    nonce?: number;
    wait?: number;
};

export { type AssetAndChain as A, type Chain as C, type InternalAsset as I, type TransactionOptions as T, type UncheckedAssetAndChain as U, type Asset as a, type AssetOfChain as b, type ChainflipNetwork as c, type ChainAssetMap as d, type ChainMap as e, Chains as f, Assets as g, InternalAssets as h, ChainflipNetworks as i, getInternalAsset as j };
