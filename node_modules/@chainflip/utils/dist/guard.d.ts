type TypeMap = {
    string: string;
    number: number;
    bigint: bigint;
    boolean: boolean;
    symbol: symbol;
    object: object;
    undefined: undefined;
};
declare const isString: (value: unknown) => value is string;
declare const isNumber: (value: unknown) => value is number;
declare const isBigInt: (value: unknown) => value is bigint;
declare const isBoolean: (value: unknown) => value is boolean;
declare const isSymbol: (value: unknown) => value is symbol;
declare const isObject: (value: unknown) => value is object;
declare const isUndefined: (value: unknown) => value is undefined;
declare const isNotNullish: <T>(value: T) => value is NonNullable<T>;
declare const isNullish: (value: unknown) => value is null | undefined;

export { type TypeMap, isBigInt, isBoolean, isNotNullish, isNullish, isNumber, isObject, isString, isSymbol, isUndefined };
