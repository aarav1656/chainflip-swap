import {
  isBigInt,
  isBoolean,
  isNumber,
  isObject,
  isString,
  isSymbol,
  isUndefined
} from "./chunk-CZNX6EUV.js";

// src/assertion.ts
function assert(condition, message = "assertion failed", Constructor = Error) {
  if (!condition) {
    throw new Constructor(message);
  }
}
function assertString(value, message) {
  if (!isString(value)) {
    throw new TypeError(message ?? `expected a "string", got "${typeof value}"`);
  }
}
function assertNumber(value, message) {
  if (!isNumber(value)) {
    throw new TypeError(message ?? `expected a "number", got "${typeof value}"`);
  }
}
function assertBigInt(value, message) {
  if (!isBigInt(value)) {
    throw new TypeError(message ?? `expected a "bigint", got "${typeof value}"`);
  }
}
function assertBoolean(value, message) {
  if (!isBoolean(value)) {
    throw new TypeError(message ?? `expected a "boolean", got "${typeof value}"`);
  }
}
function assertSymbol(value, message) {
  if (!isSymbol(value)) {
    throw new TypeError(message ?? `expected a "symbol", got "${typeof value}"`);
  }
}
function assertObject(value, message) {
  if (!isObject(value)) {
    throw new TypeError(message ?? `expected an "object", got "${typeof value}"`);
  }
}
function assertUndefined(value, message) {
  if (!isUndefined(value)) {
    throw new TypeError(message ?? `expected "undefined", got "${typeof value}"`);
  }
}
var unreachable = (x, message = "unreachable") => {
  throw new Error(message);
};

export {
  assert,
  assertString,
  assertNumber,
  assertBigInt,
  assertBoolean,
  assertSymbol,
  assertObject,
  assertUndefined,
  unreachable
};
