"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/base58.ts
var base58_exports = {};
__export(base58_exports, {
  decode: () => decode,
  encode: () => encode
});
module.exports = __toCommonJS(base58_exports);

// src/guard.ts
var createIsGuard = (type) => (value) => typeof value === type;
var isString = createIsGuard("string");
var isNumber = createIsGuard("number");
var isBigInt = createIsGuard("bigint");
var isBoolean = createIsGuard("boolean");
var isSymbol = createIsGuard("symbol");
var isObject = createIsGuard("object");
var isUndefined = createIsGuard("undefined");

// src/assertion.ts
function assert(condition, message = "assertion failed", Constructor = Error) {
  if (!condition) {
    throw new Constructor(message);
  }
}

// src/bytes.ts
var convertBase = (bytes, fromBase, toBase) => {
  const result = [];
  for (const byte of bytes) {
    let carry = byte;
    for (let i = 0; i < result.length; i += 1) {
      carry += result[i] * fromBase;
      result[i] = carry % toBase;
      carry = Math.floor(carry / toBase);
    }
    while (carry !== 0) {
      result.push(carry % toBase);
      carry = Math.floor(carry / toBase);
    }
  }
  let leadingZeros = 0;
  while (bytes[leadingZeros] === 0) {
    leadingZeros += 1;
    result.push(0);
  }
  return result.reverse();
};
var encodeBytesWithCharset = (bytes, charset2) => convertBase(bytes, 256, charset2.length).map((charCode) => charset2.charAt(charCode)).join("");
var decodeBytesWithCharset = (input, charset2) => {
  assert(new RegExp(`^[${charset2}]*$`).test(input), "Invalid input");
  const charMap = Object.fromEntries([...charset2].map((char, index) => [char, index]));
  const bytes = input.split("").map((char) => charMap[char]);
  return new Uint8Array(convertBase(bytes, charset2.length, 256));
};

// src/base58.ts
var charset = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var encode = (bytes) => encodeBytesWithCharset(bytes, charset);
var decode = (input) => decodeBytesWithCharset(input, charset);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decode,
  encode
});
