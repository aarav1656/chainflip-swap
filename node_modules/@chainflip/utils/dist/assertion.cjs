"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/assertion.ts
var assertion_exports = {};
__export(assertion_exports, {
  assert: () => assert,
  assertBigInt: () => assertBigInt,
  assertBoolean: () => assertBoolean,
  assertNumber: () => assertNumber,
  assertObject: () => assertObject,
  assertString: () => assertString,
  assertSymbol: () => assertSymbol,
  assertUndefined: () => assertUndefined,
  unreachable: () => unreachable
});
module.exports = __toCommonJS(assertion_exports);

// src/guard.ts
var createIsGuard = (type) => (value) => typeof value === type;
var isString = createIsGuard("string");
var isNumber = createIsGuard("number");
var isBigInt = createIsGuard("bigint");
var isBoolean = createIsGuard("boolean");
var isSymbol = createIsGuard("symbol");
var isObject = createIsGuard("object");
var isUndefined = createIsGuard("undefined");

// src/assertion.ts
function assert(condition, message = "assertion failed", Constructor = Error) {
  if (!condition) {
    throw new Constructor(message);
  }
}
function assertString(value, message) {
  if (!isString(value)) {
    throw new TypeError(message ?? `expected a "string", got "${typeof value}"`);
  }
}
function assertNumber(value, message) {
  if (!isNumber(value)) {
    throw new TypeError(message ?? `expected a "number", got "${typeof value}"`);
  }
}
function assertBigInt(value, message) {
  if (!isBigInt(value)) {
    throw new TypeError(message ?? `expected a "bigint", got "${typeof value}"`);
  }
}
function assertBoolean(value, message) {
  if (!isBoolean(value)) {
    throw new TypeError(message ?? `expected a "boolean", got "${typeof value}"`);
  }
}
function assertSymbol(value, message) {
  if (!isSymbol(value)) {
    throw new TypeError(message ?? `expected a "symbol", got "${typeof value}"`);
  }
}
function assertObject(value, message) {
  if (!isObject(value)) {
    throw new TypeError(message ?? `expected an "object", got "${typeof value}"`);
  }
}
function assertUndefined(value, message) {
  if (!isUndefined(value)) {
    throw new TypeError(message ?? `expected "undefined", got "${typeof value}"`);
  }
}
var unreachable = (x, message = "unreachable") => {
  throw new Error(message);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assert,
  assertBigInt,
  assertBoolean,
  assertNumber,
  assertObject,
  assertString,
  assertSymbol,
  assertUndefined,
  unreachable
});
