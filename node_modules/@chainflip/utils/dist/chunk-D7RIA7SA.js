import {
  assert
} from "./chunk-MYP3UYWE.js";

// src/bytes.ts
var bytesToHex = (input) => {
  const bytes = new Uint8Array(input);
  return `0x${Array.from(bytes).map((byte) => byte.toString(16).padStart(2, "0")).join("")}`;
};
var hexToBytes = (input) => {
  assert(/^0x[\da-f]*$/i.test(input) && input.length % 2 === 0, "Invalid hex string");
  const hex = input.slice(2);
  const bytes = new Uint8Array(hex.length / 2);
  for (let i = 0; i < hex.length; i += 2) {
    bytes[i / 2] = Number.parseInt(hex.slice(i, i + 2), 16);
  }
  return bytes;
};
var convertBase = (bytes, fromBase, toBase) => {
  const result = [];
  for (const byte of bytes) {
    let carry = byte;
    for (let i = 0; i < result.length; i += 1) {
      carry += result[i] * fromBase;
      result[i] = carry % toBase;
      carry = Math.floor(carry / toBase);
    }
    while (carry !== 0) {
      result.push(carry % toBase);
      carry = Math.floor(carry / toBase);
    }
  }
  let leadingZeros = 0;
  while (bytes[leadingZeros] === 0) {
    leadingZeros += 1;
    result.push(0);
  }
  return result.reverse();
};
var encodeBytesWithCharset = (bytes, charset) => convertBase(bytes, 256, charset.length).map((charCode) => charset.charAt(charCode)).join("");
var decodeBytesWithCharset = (input, charset) => {
  assert(new RegExp(`^[${charset}]*$`).test(input), "Invalid input");
  const charMap = Object.fromEntries([...charset].map((char, index) => [char, index]));
  const bytes = input.split("").map((char) => charMap[char]);
  return new Uint8Array(convertBase(bytes, charset.length, 256));
};
var addPrefix = (input) => {
  const [, bytes] = /^(?:0x)?([a-f\d]*)$/i.exec(input) || [];
  assert(bytes, "Invalid hex string");
  return `0x${bytes}`;
};
function reverseBytes(input) {
  const reversed = bytesToHex(hexToBytes(addPrefix(input)).reverse());
  return input.startsWith("0x") ? reversed : reversed.slice(2);
}

export {
  bytesToHex,
  hexToBytes,
  encodeBytesWithCharset,
  decodeBytesWithCharset,
  reverseBytes
};
